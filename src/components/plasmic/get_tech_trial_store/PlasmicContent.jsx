// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hhQrHbWb3poeAbJ81dz1C3
// Component: PMO_spAAe3
import * as React from 'react'
import * as p from '@plasmicapp/react-web'
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from '@plasmicapp/react-web'
import projectcss from './plasmic_get_tech_trial_store.module.css' // plasmic-import: hhQrHbWb3poeAbJ81dz1C3/projectcss
import sty from './PlasmicContent.module.css' // plasmic-import: PMO_spAAe3/css

export const PlasmicContent__VariantProps = new Array()

export const PlasmicContent__ArgProps = new Array('children')

function PlasmicContent__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props
  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__dW1Et
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {
                  "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                }
              </React.Fragment>
              <span
                className={'plasmic_default__all plasmic_default__span'}
                style={{ fontWeight: 700 }}
              >
                {'Code'}
              </span>
              <React.Fragment>
                {
                  ' button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time.'
                }
              </React.Fragment>
            </React.Fragment>
          </div>
        ),

        value: args.children
      })}
    </div>
  )
}

const PlasmicDescendants = {
  root: ['root']
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContent__ArgProps,
      internalVariantPropNames: PlasmicContent__VariantProps
    })

    return PlasmicContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    })
  }
  if (nodeName === 'root') {
    func.displayName = 'PlasmicContent'
  } else {
    func.displayName = `PlasmicContent.${nodeName}`
  }
  return func
}

export const PlasmicContent = Object.assign(
  // Top-level PlasmicContent renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicContent
    internalVariantProps: PlasmicContent__VariantProps,
    internalArgProps: PlasmicContent__ArgProps
  }
)

export default PlasmicContent
/* prettier-ignore-end */
